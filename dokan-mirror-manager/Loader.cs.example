using System;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows;

namespace DokanMirrorManager;

/// <summary>
/// Example loader for using DokanMirrorManager as a library.
/// This file is NOT compiled by default - it's an example for library usage.
///
/// To use this as a library:
/// 1. Change OutputType in .csproj from "WinExe" to "Library"
/// 2. Rename this file from Loader.cs.example to Loader.cs
/// 3. Build the project - it will produce DokanMirrorManager.dll
/// 4. Call __Launch__ from your native code to start the application
/// </summary>
public static class Loader
{
    private static Thread? _appThread;
    private static Application? _app;

    /// <summary>
    /// Entry point for native callers.
    /// Call this function from unmanaged code to launch the DokanMirrorManager application.
    /// </summary>
    [UnmanagedCallersOnly(EntryPoint = "__Launch__")]
    public static void Launch()
    {
        // Prevent multiple launches
        if (_appThread != null && _appThread.IsAlive)
        {
            return;
        }

        // Launch WPF application in STA thread
        _appThread = new Thread(() =>
        {
            try
            {
                // Create and run WPF application
                _app = new App();
                _app.InitializeComponent();
                _app.Run();
            }
            catch (Exception ex)
            {
                // Log error to file since we can't show MessageBox from unmanaged caller
                var logPath = System.IO.Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "loader_error.log");
                System.IO.File.AppendAllText(logPath, $"[{DateTime.Now}] Launch Error: {ex}\n\n");
            }
        });

        _appThread.SetApartmentState(ApartmentState.STA);
        _appThread.IsBackground = false; // Keep app alive
        _appThread.Name = "DokanMirrorManager-Main";
        _appThread.Start();
    }

    /// <summary>
    /// Optional: Shutdown entry point for graceful termination.
    /// </summary>
    [UnmanagedCallersOnly(EntryPoint = "__Shutdown__")]
    public static void Shutdown()
    {
        if (_app != null)
        {
            _app.Dispatcher.Invoke(() =>
            {
                _app.Shutdown();
            });
        }
    }
}

/*
 * Example usage from C/C++:
 *
 * // Load the DLL
 * HMODULE hModule = LoadLibrary(L"DokanMirrorManager.dll");
 *
 * // Get the function pointer
 * typedef void (*LaunchFunc)();
 * LaunchFunc launch = (LaunchFunc)GetProcAddress(hModule, "__Launch__");
 *
 * // Call the function to start the application
 * if (launch) {
 *     launch();
 * }
 *
 * // Later, to shutdown:
 * typedef void (*ShutdownFunc)();
 * ShutdownFunc shutdown = (ShutdownFunc)GetProcAddress(hModule, "__Shutdown__");
 * if (shutdown) {
 *     shutdown();
 * }
 *
 * FreeLibrary(hModule);
 */
